using Microsoft.CodeAnalysis;
using Microsoft.EntityFrameworkCore.Internal;
using Newtonsoft.Json;
using XrmFramework.Core;

namespace XrmFramework.Analyzers.Generators;

[Generator]
public class TableJsonDefinitionGenerator : BaseTableDefinitionGenerator
{
	protected override bool GenerateTableFiles => true;

	protected override void WriteTable(SourceProductionContext productionContext, TableCollection tables, Table table, HashSet<string> alreadyCreatedEnums)
	{
		var sb = new IndentedStringBuilder();
		
		if (!table.Columns.Any())
		{
			return;
		}

		WriteHeaders(sb);

		sb.AppendLine($"const {table.LogicalName}Definition = {{");

		using (sb.Indent())
		{
			WriteEntityMetadata(sb, table);

			sb.AppendLine("Columns : {");
			using (sb.Indent())
			{
				foreach (var col in table.Columns)
				{
					WriteColumn(sb, col);
				}
			}
			sb.AppendLine("},");

			sb.AppendLine("Enums : {");
			using (sb.Indent())
			{
				foreach (var optionSetEnum in table.Enums)
				{
					WriteEnum(sb, optionSetEnum);
				}
			}
		}

		sb.AppendLine("};");
		
		//On crée le chemin pour cette table

		productionContext.AddSource($"{table.Name}Definition.json", sb.ToString());
	}

	private void WriteEnum(IndentedStringBuilder sb, OptionSetEnum optionSetEnum)
	{
		sb.AppendLine($"{optionSetEnum.Name} : {{");
		using (sb.Indent())
		{
			foreach (var value in optionSetEnum.Values)
			{
				sb.AppendLine($"{value.Name} : \"{value.Value}\",");
			}
		}
		sb.AppendLine("},");
	}

	private void WriteColumn(IndentedStringBuilder sb, Column col)
	{
		sb.AppendLine($"{col.Name} : \"{col.LogicalName}\",");
	}

	private void WriteEntityMetadata(IndentedStringBuilder sb, Table table)
	{
		sb.AppendLine($"LogicalName = \"{table.LogicalName}\",");
		sb.AppendLine($"SchemaName = \"{table.Name}\",");
		sb.AppendLine($"CollectionName : \"{table.CollectionName}\",");
		sb.AppendLine($"LogicalCollectionName : \"{table.CollectionName}\",");
		sb.AppendLine($"PrimaryIdAttribute : \"{table.Columns.FirstOrDefault(c => c.PrimaryType   == PrimaryType.Id)?.LogicalName}\",");
		sb.AppendLine($"PrimaryNameAttribute : \"{table.Columns.FirstOrDefault(c => c.PrimaryType == PrimaryType.Name)?.LogicalName}\",");
	}

	private void WriteHeaders(IndentedStringBuilder sb)
	{
		sb.AppendLine("/*");
		sb.AppendLine(" * Auto generated by XrmFramework 2.0");
		sb.AppendLine(" * Do not edit directly this file");
		sb.AppendLine(" */");
	}


	private void AddColumnSummary(IndentedStringBuilder sb, Column col, OptionSetEnum? optionSetEnum)
	{
		sb.AppendLine("/// <summary>");
		sb.AppendLine("/// ");
		sb.AppendLine($"/// Type : {col.Type}{(optionSetEnum == null ? "" : " (" + optionSetEnum.Name + ")")}");
		sb.Append("/// Validity :  ");

		var isFirst = true;
		if ((col.Capabilities & AttributeCapabilities.Read) != AttributeCapabilities.None)
		{
			isFirst = false;
			sb.Append("Read ");
		}

		if ((col.Capabilities & AttributeCapabilities.Create) != AttributeCapabilities.None)
		{
			if (isFirst)
				isFirst = false;
			else
				sb.Append("| ");
			sb.Append("Create ");
		}

		if ((col.Capabilities & AttributeCapabilities.Update) != AttributeCapabilities.None)
		{
			if (isFirst)
				isFirst = false;
			else
				sb.Append("| ");
			sb.Append("Update ");
		}

		if ((col.Capabilities & AttributeCapabilities.AdvancedFind) != AttributeCapabilities.None)
		{
			if (!isFirst) sb.Append("| ");

			sb.Append("AdvancedFind ");
		}

		sb.AppendLine();

		sb.AppendLine("/// </summary>");
	}

	private void AddRelations(IndentedStringBuilder sb, TableCollection tables, Table table, List<Relation> relations,
	                          string relationType)
	{
		if (relations.Any())
		{
			sb.AppendLine($"public static class {relationType}");
			sb.AppendLine("{");
			using (sb.Indent())
			{
				foreach (var relationship in relations)
				{
					if (relationType != "ManyToOneRelationships")
						if (!tables.Any(t => t.LogicalName == relationship.EntityName))
							continue;
					sb.Append("[Relationship(");
					var targetTable = tables.FirstOrDefault(t => t.LogicalName == relationship.EntityName);
					if (targetTable != null)
						sb.Append($"{targetTable.Name}Definition.EntityName");
					else
						sb.Append($"\"{relationship.EntityName}\"");

					sb.Append($", EntityRole.{relationship.Role}, \"{relationship.NavigationPropertyName}\", ");


					if (relationType == "ManyToOneRelationships")
					{
						if (relationship.Role == EntityRole.Referencing)
						{
							var rc = table.Columns.FirstOrDefault(
								col => col.LogicalName == relationship.LookupFieldName);

							if (rc != null && rc.Selected)
								sb.Append($"{table.Name}Definition.Columns.{rc.Name}");
							else
								sb.Append($"\"{relationship.LookupFieldName}\"");
						}
						else
						{
							var rc = table.Columns.FirstOrDefault(
								col => col.LogicalName == relationship.LookupFieldName);


							if (rc != null)
								sb.Append($"{table.Name}Definition.Columns.{rc.Name}");
							else
								sb.Append($"\"{relationship.LookupFieldName}\"");
						}

						sb.AppendLine(")]");
						sb.AppendLine($"public const string {relationship.Name} = \"{relationship.Name}\";");
					}
					else
					{
						if (relationship.Role == EntityRole.Referencing)
						{
							var tb = tables.FirstOrDefault(t => t.LogicalName          == relationship.EntityName);
							var rc = tb?.Columns.FirstOrDefault(col => col.LogicalName == relationship.LookupFieldName);

							if (rc != null && rc.Selected && tb != null)
								sb.Append($"{tb.Name}Definition.Columns.{rc.Name}");
							else
								sb.Append($"\"{relationship.LookupFieldName}\"");
						}
						else
						{
							var tb = tables.FirstOrDefault(t => t.LogicalName == relationship.EntityName);

							var rc = tb?.Columns.FirstOrDefault(col => col.LogicalName == relationship.LookupFieldName);

							if (rc != null && rc.Selected && tb != null)
								sb.Append($"{tb.Name}Definition.Columns.{rc.Name}");
							else
								sb.Append($"\"{relationship.LookupFieldName}\"");
						}

						sb.AppendLine(")]");
						sb.AppendLine($"public const string {relationship.Name} = \"{relationship.Name}\";");
					}
				}
			}

			sb.AppendLine("}");
		}
	}
}
